// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  dni           String    @unique
  phone         String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  role          Role      @default(USER)
  status        MembershipStatus @default(PENDING_VALIDATION)

  familyHeadId  String?
  familyHead    User?     @relation("FamilyGroup", fields: [familyHeadId], references: [id], onDelete: SetNull)
  familyMembers User[]    @relation("FamilyGroup")

  accounts      Account[]
  sessions      Session[]

  payments      Payment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
}

enum MembershipStatus {
  PENDING_VALIDATION
  ACTIVE
  INACTIVE
}

enum PaymentMethod {
  MANUAL
  MERCADOPAGO_AUTOMATIC
  MERCADOPAGO_MANUAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Payment {
  id              String        @id @default(cuid())
  amount          Decimal
  periodCovered   String
  paymentDate     DateTime      @default(now())
  paymentMethod   PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}